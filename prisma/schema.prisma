generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model lt_role {
  role_id            Int                  @id @default(autoincrement())
  name               String               @unique
  slug               String
  is_super           Boolean              @default(false)
  created_at         DateTime             @default(now())
  updated_at         DateTime             @default(now())
  admins             lt_admin[]
  lt_role_permission lt_role_permission[]

  @@unique([slug, name], map: "lt_role_un")
}

model lt_permission {
  permission_id      Int                  @id @default(autoincrement())
  name               String               @unique
  endpoint           String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @default(now())
  lt_role_permission lt_role_permission[]
}

model lt_role_permission {
  role_permission_id Int           @id @default(autoincrement())
  role_id            Int
  permission_id      Int
  created_at         DateTime      @default(now())
  updated_at         DateTime      @default(now())
  is_active          Boolean       @default(true)
  permission         lt_permission @relation(fields: [permission_id], references: [permission_id])
  role               lt_role       @relation(fields: [role_id], references: [role_id])

  @@index([role_id])
}

model lt_user {
  user_id           BigInt      @id @default(autoincrement())
  email             String      @unique @db.VarChar(128)
  password          String
  is_password_reset Boolean     @default(false)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @default(now())
  mobile_number     String?     @db.VarChar(64)
  lotto_tickets     lt_ticket[]
}

model lt_admin {
  admin_id   Int              @id @default(autoincrement())
  name       String
  email      String           @unique
  created_at DateTime         @default(now())
  updated_at DateTime         @default(now())
  role_id    Int
  status     String
  org_id     Int?
  org        lt_organization? @relation(fields: [org_id], references: [org_id])
  role       lt_role          @relation(fields: [role_id], references: [role_id])

  @@index([role_id])
}

model lt_organization {
  org_id     Int        @id @default(autoincrement())
  name       String
  slug       String     @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  status     String
  admins     lt_admin[]
}

model lt_lotto {
  lotto_id    BigInt   @id @default(autoincrement())
  org_id      Int
  name        String
  description String?
  pool_mnt    Int
  price       Int
  start_at    DateTime @default(now())
  end_at      DateTime @default(now())
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  is_active   Boolean  @default(true)
}

model lt_activity {
  activity_id BigInt   @id @default(autoincrement())
  name        String
  collection  String
  item_id     Int
  before      String?
  after       String?
  action      String
  admin_id    Int
  created_at  DateTime @default(now())
}

model lt_ticket {
  ticket_id   BigInt       @id @default(autoincrement())
  user_id     BigInt
  lotto_id    BigInt
  number      String
  purchase_id BigInt?      @unique
  created_at  DateTime     @default(now())
  updated_at  DateTime     @default(now())
  purchase    lt_purchase?
  user        lt_user      @relation(fields: [user_id], references: [user_id])
}

model lt_purchase {
  purchase_id BigInt    @id @default(autoincrement())
  user_id     BigInt
  ticket_id   BigInt    @unique
  number      String
  method      String
  bank_id     Int?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  bank        lt_bank?  @relation(fields: [bank_id], references: [bank_id])
  ticket      lt_ticket @relation(fields: [ticket_id], references: [purchase_id])
}

model lt_bank {
  bank_id   Int           @id @default(autoincrement())
  name      String
  code      String
  purchases lt_purchase[]
}

model lt_user_bank_transaction {
  user_bank_transaction_id BigInt    @id(map: "lt_user_transaction_pk") @default(autoincrement())
  first_name               String?   @db.VarChar
  last_name                String?   @db.VarChar
  description              String?   @db.VarChar
  amount                   Float?
  created_at               DateTime? @db.Timestamp(6)
  from_bank_name           String?   @db.VarChar
  from_bank_account        String?   @db.VarChar
  to_bank_name             String?   @db.VarChar
  to_bank_account          String?   @db.VarChar
  bank_transaction_id      String?   @db.VarChar
  bank_transaction_at      DateTime? @db.Timestamp(6)
}
